(* AUTO-GENERATED by compile.py Step 0 *)

let file_main_ext_ml = {|
open Lwt.Infix
open Cohttp_lwt_unix
open Migrations  (* We only need initiate_migrations () *)

let () = Dotenv.export ()
let () = Random.self_init ()

(* Define other routes as before. *)
let routes = [
  ("/", Landing.handle_landing);
  ("/about", About.handle_about);
  ("/login", Login.handle_login);
  ("/logout", Logout.handle_logout);
  ("/dashboard", Dashboard.handle_dashboard);
]

let route conn req body =
  let uri_path = Uri.path (Request.uri req) in
  if Astring.String.is_prefix ~affix:"/assets" uri_path then
    Assets.handle_assets conn req body
  else
    match List.find_opt (fun (p, _) -> p = uri_path) routes with
    | Some (_, handler) -> handler conn req body
    | None ->
        Server.respond_string ~status:`Not_found ~body:"Not Found" ()

(* Retrieve environment variables for the app_name and port. *)
let app_name = Sys.getenv "APP_NAME"
let port = int_of_string (Sys.getenv "PORT")

(* Main entry point. *)
let () =
  Lwt_main.run begin
    initiate_migrations () >>= function
    | false ->
      Printf.eprintf "Failed to run migrations, not starting server.\n%!";
      Lwt.return_unit
    | true ->
      Printf.printf "Starting %s on port %d\n%!" app_name port;
      let config = Server.make ~callback:route () in
      Server.create ~mode:(`TCP (`Port port)) config
  end


|}

let ext_env = {|

APP_NAME=YourApp
PUBLIC_DIR=resources
PORT=8080

|}

let ext_gitignore = {|
*.swp
*.cmi
*.cmx
*.o
*.out
*.env
*.dbs
*.tailwindcss-linux-x64
app

|}

let ext_tailwind_build_input = {|
@import "tailwindcss";


|}

let file_compile_ext_sh = {|
#!/bin/bash

# Step 1: Compile modules
ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib utils/renderer.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64,sqlite3 \
  -I utils -I lib utils/migrations.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib lib/landing.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib lib/about.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib lib/login.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib lib/logout.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib lib/dashboard.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib lib/assets.ml

ocamlfind ocamlc -c -thread -package cohttp-lwt-unix,dotenv,str,base64 \
  -I utils -I lib main.ml

# Step 2: Link modules
ocamlfind ocamlc -thread -package cohttp-lwt-unix,dotenv,str,base64,sqlite3 -linkpkg \
  -o app \
  utils/renderer.cmo \
  utils/migrations.cmo \
  lib/landing.cmo \
  lib/about.cmo \
  lib/login.cmo \
  lib/logout.cmo \
  lib/dashboard.cmo \
  lib/assets.cmo \
  main.cmo

# Step 3: Clean .cmi, .cmo, .out
find . -type f \( -name "*.cmo" -o -name "*.cmi" -o -name "*.out" \) -exec rm -f {} +

# Step 4: Download the tailwindcss cli, and compile the assets
TAILWIND_CSS_URL="https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64"
TAILWIND_CSS_BINARY=".tailwindcss-linux-x64"  # Hidden file
INPUT_FILE=".tailwind_build_input"
OUTPUT_FILE="resources/assets/styles.css"

# Check if the Tailwind CSS binary already exists, download it if not
if [ ! -f "$TAILWIND_CSS_BINARY" ]; then
    curl -sLO "$TAILWIND_CSS_URL"
    mv "tailwindcss-linux-x64" "$TAILWIND_CSS_BINARY"
    chmod +x "$TAILWIND_CSS_BINARY"
fi

./"$TAILWIND_CSS_BINARY" -i "$INPUT_FILE" -o "$OUTPUT_FILE" --minify



echo "[INFO] Use the --and_run flag to compile and run the app automatically."

# Step 4: Optionally run
if [[ "$1" == "--and_run" ]]; then
  ./app
fi


|}

let dir_dbs_dir_auth_file_schema_ext_sql = {|
CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT NOT NULL UNIQUE,
  password_hash TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



|}

let dir_utils_file_migrations_ext_ml = {|
open Lwt.Infix
open Sqlite3

let initiate_migrations () : bool Lwt.t =
  (* 1. Reads a file’s entire contents. *)
  let read_file_contents path =
    let ch = open_in path in
    Fun.protect
      (fun () -> really_input_string ch (in_channel_length ch))
      ~finally:(fun () -> close_in ch)
  in

  (* 2. Check if a CREATE TABLE statement corresponds to a table that exists in the DB. *)
  let table_is_compatible ~db ~table_sql =
    let statement = String.trim table_sql in
    let re =
      Str.regexp_case_fold
        "^[ \t]*CREATE[ \t]+TABLE[ \t]+\\(IF[ \t]+NOT[ \t]+EXISTS[ \t]+\\)?[\"'`]*\\([A-Za-z0-9_]+\\)[\"'`]*"
    in
    if Str.string_match re statement 0 then
      let table_name = Str.matched_group 2 statement in
      let lower_name = String.lowercase_ascii table_name in
      let sql =
        Printf.sprintf
          "SELECT name
           FROM sqlite_master
           WHERE type='table'
             AND name='%s';"
          lower_name
      in
      let found = ref false in
      let callback (row : row_not_null) (_hdrs : headers) =
        if Array.length row > 0 then found := true
      in
      ignore (exec_not_null db ~cb:callback sql);
      !found
    else
      false
  in

  (* 3. Retrieve a list of existing tables in the DB. *)
  let get_existing_tables db =
    let tbls = ref [] in
    let cb (row : row_not_null) (_headers : headers) =
      if Array.length row > 0 then
        tbls := row.(0) :: !tbls
    in
    ignore (exec_not_null db ~cb
      "SELECT name FROM sqlite_master WHERE type='table';");
    !tbls
  in

  (* 3b. Retrieve the CREATE TABLE statement for a given table. *)
  let get_table_schema db table_name =
    let schema = ref "" in
    let callback (row : row_not_null) (_headers : headers) =
      if Array.length row > 0 then
        schema := row.(0)
    in
    let query =
      Printf.sprintf
        "SELECT sql
         FROM sqlite_master
         WHERE type='table'
           AND name='%s';"
        table_name
    in
    ignore (Sqlite3.exec_not_null db ~cb:callback query);
    !schema
  in

  (* 4. Apply the entire schema from disk, printing info when new tables are created. *)
  let apply_schema db schema_sql =
    (* Split the schema into statements by semicolon. *)
    let statements = Str.split (Str.regexp ";") schema_sql in

    let total_statements = List.length statements - 1 in
    Printf.printf "[DEBUG] apply_schema: Found %d statements.\n%!" total_statements;

    (* A regex to detect CREATE TABLE statements and capture the table name. *)
    let re_create_table =
      Str.regexp_case_fold
        "^[ \t]*CREATE[ \t]+TABLE[ \t]+\\(IF[ \t]+NOT[ \t]+EXISTS[ \t]+\\)?[\"'`]*\\([A-Za-z0-9_]+\\)[\"'`]*"
    in

    (* Apply each non-blank statement individually, using iteri for the index. *)
    List.iteri (fun i stmt ->
      let trimmed = String.trim stmt in

      (* Skip empty statements (like trailing semicolons). *)
      if trimmed <> "" then begin
        Printf.printf
          "[DEBUG] Applying statement %d/%d:\n%s\n%!"
          (i + 1) total_statements
          trimmed;

        (* If the statement creates a table, print a message about it. *)
        if Str.string_match re_create_table trimmed 0 then begin
          let table_name = Str.matched_group 2 trimmed in
          Printf.printf "[INFO] Creating table: %s\n%!" table_name;
        end;

        (* Execute this single statement. *)
        match Sqlite3.exec db trimmed with
        | Sqlite3.Rc.OK ->
            Printf.printf
              "[DEBUG] Statement %d/%d executed successfully.\n%!"
              (i + 1) total_statements
        | err ->
            (* Print full debugging information. *)
            Printf.eprintf
              "[ERROR] Statement %d/%d failed.\n\
               [ERROR] While applying the following SQL:\n%s\n\
               SQLite returned error code: %s\n\
               Error message: %s\n%!"
              (i + 1) total_statements
              trimmed
              (Sqlite3.Rc.to_string err)
              (Sqlite3.errmsg db);

            (* Then raise an exception so the caller's catch block can handle it. *)
            failwith ""
      end
    ) statements
  in

  (* 5. Handle one folder => open/create DB => check/apply schema.sql. *)
  let handle_folder db_name =
    let db_dir = Filename.concat "dbs" db_name in
    let db_path = Filename.concat db_dir (db_name ^ ".db") in
    let schema_path = Filename.concat db_dir "schema.sql" in

    let db =
      let db = db_open db_path in
      match errcode db with
      | Rc.OK -> db
      | err ->
         failwith (Printf.sprintf "Failed to open DB '%s': %s"
                     db_path (Rc.to_string err))
    in

    let schema_exists = Sys.file_exists schema_path in
    if schema_exists then begin
      let existing_tables = get_existing_tables db in
      let schema_sql = read_file_contents schema_path in
      match existing_tables with
      | [] ->
         (* If no tables at all, apply schema. *)
         Printf.printf
           "[INFO] No tables found in '%s'; applying schema.\n%!"
           db_name;
         apply_schema db schema_sql
      | _::_ ->
         (* We have some tables => ensure the new schema is compatible. *)
         let statements = Str.split (Str.regexp ";") schema_sql in
         let incompatible =
           List.exists
             (fun stmt ->
                let trimmed = String.trim stmt in
                if trimmed = "" then
                  false
                else if String.lowercase_ascii trimmed
                        |> String.starts_with ~prefix:"create table"
                then
                  not (table_is_compatible ~db ~table_sql:trimmed)
                else
                  false)
             statements
         in
         if incompatible then begin
           (* Print all existing tables’ schemas. *)
           Printf.printf
             "\n[ERROR] Existing tables in '%s.db' are incompatible with schema.sql!\n\n"
             db_name;

           Printf.printf "Existing table definitions:\n";
           List.iter
             (fun tbl ->
                let tbl_schema = get_table_schema db tbl in
                Printf.printf "  -- Table: %s\n%s\n\n" tbl tbl_schema
             )
             existing_tables;

           Printf.printf "File schema (schema.sql):\n%s\n\n" schema_sql;

           failwith (Printf.sprintf
              "Schema incompatibility in '%s.db' with schema.sql!"
              db_name)
         end
    end;

    ignore (db_close db);
    Lwt.return_unit
  in

  (* 6. Discover subdirectories under "dbs". *)
  let read_db_names () =
    let dbs_dir = "dbs" in
    if not (Sys.file_exists dbs_dir) then
      failwith (Printf.sprintf "Directory '%s' does not exist!" dbs_dir);
    let is_subdir f =
      let full_path = Filename.concat dbs_dir f in
      Sys.is_directory full_path
    in
    Sys.readdir dbs_dir
    |> Array.to_list
    |> List.filter is_subdir
  in

  (* 7. For each DB folder, run handle_folder. *)
  Lwt.catch
    (fun () ->
      (* 7. For each DB folder, run handle_folder. *)
      let db_names = read_db_names () in
      Lwt_list.iter_s handle_folder db_names >|= fun () ->
      true
    )
    (fun ex ->
      (* Print the exception and return false on failure *)
      (* prerr_endline (Printexc.to_string ex); *)
      Lwt.return false
    )


|}

let dir_utils_file_renderer_ext_ml = {|
open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix

(* 
    Global session storage means than for x number users, x session 
    storage objects will be stored in memory at any given point of time 
    if they login together

    Each active user session corresponds to an object stored in memory. 
    So, for `x` users logged in simultaneously, there will be `x` 
    session objects in memory. For apps with less than 100,000 users, 
    this approach is often feasible, provided:

    - **Efficient Use of Data**: Session objects contain only necessary 
        information to avoid excessive memory usage.
    - **Memory Management**: Adequate system resources and monitoring 
        help handle peak loads and avoid memory exhaustion.
    - **Session Expiry**: Implementing session timeouts or expiration 
        to automatically free up memory for inactive sessions.
*)
let session_store : (string, string) Hashtbl.t = Hashtbl.create 16


let get_env var =
  try
    Sys.getenv var
  with
  | Not_found -> "None"

(* Generates a random session_id, then associates it with the given username. *)
(*
let create_session ~(username : string) : string =
  let rand_bytes = Bytes.create 16 in
  for i = 0 to 15 do
    Bytes.set rand_bytes i (char_of_int (Random.int 256))
  done;
  let session_id = Base64.encode_exn (Bytes.to_string rand_bytes) in
  Hashtbl.replace session_store session_id username;
  session_id
*)

(* Removes an existing session from the store by session ID in the request. *)
let handle_session_destruction (req : Cohttp.Request.t) : unit =
  let extract_session_id (cookie_str : string) : string option =
    let parts = String.split_on_char ';' cookie_str in
    let find_sessionid kv =
      let kv = String.trim kv in
      if String.length kv >= 10 && String.sub kv 0 10 = "sessionid="
      then Some (String.sub kv 10 (String.length kv - 10))
      else None
    in
    List.fold_left
      (fun acc item ->
         match acc with
         | None -> find_sessionid item
         | Some _ -> acc)
      None
      parts
  in

  let cookie_header = Cohttp.Header.get (Request.headers req) "cookie" in
  match cookie_header with
  | None -> ()
  | Some cookie_str ->
      match extract_session_id cookie_str with
      | Some session_id -> Hashtbl.remove session_store session_id
      | None -> ()


(* Logs the user in *)
let handle_auth body_str =
  (* Local function to create a session. *)
  let create_session ~(username : string) : string =
    let rand_bytes = Bytes.create 16 in
    for i = 0 to 15 do
      Bytes.set rand_bytes i (char_of_int (Random.int 256))
    done;
    let session_id = Base64.encode_exn (Bytes.to_string rand_bytes) in
    Hashtbl.replace session_store session_id username;
    session_id
  in

  (* Define valid users as a list of tuples (username, password) *)
  let valid_users = [
    ("admin", "secret");
    ("bob", "bob123");
    ("alice", "alice123");
  ] in

  let parse_post_body (body_str : string) : (string * string) list =
    let parts = Str.split (Str.regexp_string "&") body_str in
    List.map (fun part ->
        match Str.bounded_split (Str.regexp_string "=") part 2 with
        | [k; v] -> (k, v)
        | _ -> ("", "")
      ) parts
  in

  let form_data = parse_post_body body_str in
  let username_submitted = List.assoc_opt "username" form_data |> Option.value ~default:"" in
  let password_submitted = List.assoc_opt "password" form_data |> Option.value ~default:"" in

  let maybe_user =
    List.find_opt
      (fun (username, password) -> username = username_submitted && password = password_submitted)
      valid_users
  in

  match maybe_user with
  | Some (username, _) ->
      let session_id = create_session ~username in
      let headers = Header.add (Header.init ()) "Set-Cookie"
          ("sessionid=" ^ session_id ^ "; Path=/") in
      Ok (headers, Uri.of_string "/dashboard")
  | None ->
      Error "Invalid credentials. Please try again."


(* Determine if a user is logged in by checking the session *)
let get_username_if_user_is_logged_in req =
  (* Function to extract session ID from cookie string; returns a string option *)
  let get_session_id_from_cookie cookie_str =
    let parts = String.split_on_char ';' cookie_str in
    let find_sessionid kv =
      let kv = String.trim kv in
      if String.length kv >= 10 && String.sub kv 0 10 = "sessionid="
      then Some (String.sub kv 10 (String.length kv - 10))
      else None
    in
    List.fold_left
      (fun acc item -> match acc with None -> find_sessionid item | Some _ -> acc)
      None
      parts
  in

  (* Function to retrieve a username associated with a session ID; returns a string option *)
  let get_username_for_session session_id =
    Hashtbl.find_opt session_store session_id
  in

  let cookie_header = Cohttp.Header.get (Request.headers req) "cookie" in
  match cookie_header with
  | None -> None
  | Some cookie_str ->
      (* Instead of Option.bind, just manually match on the option. *)
      match get_session_id_from_cookie cookie_str with
      | None -> None
      | Some session_id -> get_username_for_session session_id


(*
  Given a cookie string (e.g., "sessionid=xyz; Path=/"), extract
  the value of sessionid. 
*)
let handle_cookie (req : Request.t) : string option =
  (* Inline function to extract session ID from a cookie string *)
  let extract_session_id cookie_str =
    let parts = String.split_on_char ';' cookie_str in
    let rec find_sessionid = function
      | [] -> None
      | kv :: rest ->
        let kv = String.trim kv in
        if String.length kv >= 10 && String.sub kv 0 10 = "sessionid="
        then Some (String.sub kv 10 (String.length kv - 10))
        else find_sessionid rest
    in
    find_sessionid parts
  in

  (* Inline function to look up username for a given session ID *)
  let get_username_for_session session_id =
    Hashtbl.find_opt session_store session_id
  in

  let headers = Request.headers req in
  match Header.get headers "cookie" with
  | None -> None
  | Some cookie_str ->
    match extract_session_id cookie_str with
    | None -> None
    | Some sid ->
      get_username_for_session sid


(*
  Renders an HTML file from disk (defaults to the "dist" directory),
  performing string substitutions like [("{{USERNAME}}", "Alice"); ...].
*)
let server_side_render (filename : string) 
                       (substitutions : (string * string) list)
                       : (Cohttp.Response.t * Cohttp_lwt.Body.t) Lwt.t =
  let public_dir = Sys.getenv_opt "PUBLIC_DIR" |> Option.value ~default:"dist" in
  let filepath = Filename.concat public_dir filename in
  if Sys.file_exists filepath then
    Lwt_io.(with_file ~mode:Input filepath read) >>= fun content ->
    let replaced_content =
      List.fold_left
        (fun acc (needle, replacement) ->
           Str.global_replace (Str.regexp_string needle) replacement acc
        )
        content
        substitutions
    in
    Server.respond_string ~status:`OK ~body:replaced_content ()
  else
    Server.respond_string
      ~status:`Not_found
      ~body:"File not found"
      ()


|}

let dir_resources_file_about_ext_html = {|
<html>
  <head>
    <title>{{APP_NAME}}/ {{PAGE_TITLE}}</title>
    <link rel="stylesheet" href="/assets/styles.css">
  </head>
  <body>
    <h2 class="mt-24 bg-gray-900">About Page</h2>

  <h1 class="text-3xl font-bold underline">
    Hello world!
  </h1>
    
    <!-- We'll inject either "logged in as..." or nothing here: -->
    <div>{{LOGGED_IN_AS}}</div>

    <!-- We'll also inject the link block (login or dashboard/logout) here: -->
    <div>{{LINK_BLOCK}}</div>

    <div>{{ABOUT_CONTENT}}</div>
  </body>
</html>


|}

let dir_resources_file_login_ext_html = {|
<html>
  <head>
    <title>{{APP_NAME}} / Login</title>
  </head>
  <body>
    <h2>Login</h2>
    {{ERROR_MESSAGE}}
    <form method="POST" action="/login">
      <label>Username:
        <input type="text" name="username"/>
      </label>
      <br/>
      <label>Password:
        <input type="password" name="password"/>
      </label>
      <br/>
      <input type="submit" value="Login"/>
    </form>
  </body>
</html>


|}

let dir_resources_file_landing_ext_html = {|

<!-- dist/landing.html -->
<html>
  <head>
    <title>{{APP_NAME}}/ Landing Page</title>
    <link rel="stylesheet" href="/assets/styles.css">
  </head>
  <body class="bg-red-200">
    <h1>Welcome to Our Simple OCaml App</h1>

    <!-- We'll inject either "logged in as..." or nothing here: -->
    <div>{{LOGGED_IN_AS}}</div>

    <!-- We'll also inject the link block (login or dashboard/logout) here: -->
    <div>{{LINK_BLOCK}}</div>
  </body>
</html>

|}

let dir_resources_file_dashboard_ext_html = {|

<html>
  <head>
    <title>{{APP_NAME}}/ Dashboard</title>
  </head>
  <body>
    <h1>Dashboard</h1>
    <p>Welcome, {{USERNAME}}!</p>
    <p><a href="/">Go back to Landing Page</a></p>
  </body>
</html>

|}

let dir_resources_dir_assets_file_styles_ext_css = {|
/*! tailwindcss v4.0.3 | MIT License | https://tailwindcss.com */
@layer theme{:root,:host{--font-sans:ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-serif:ui-serif,Georgia,Cambria,"Times New Roman",Times,serif;--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-red-50:oklch(.971 .013 17.38);--color-red-100:oklch(.936 .032 17.717);--color-red-200:oklch(.885 .062 18.334);--color-red-300:oklch(.808 .114 19.571);--color-red-400:oklch(.704 .191 22.216);--color-red-500:oklch(.637 .237 25.331);--color-red-600:oklch(.577 .245 27.325);--color-red-700:oklch(.505 .213 27.518);--color-red-800:oklch(.444 .177 26.899);--color-red-900:oklch(.396 .141 25.723);--color-red-950:oklch(.258 .092 26.042);--color-orange-50:oklch(.98 .016 73.684);--color-orange-100:oklch(.954 .038 75.164);--color-orange-200:oklch(.901 .076 70.697);--color-orange-300:oklch(.837 .128 66.29);--color-orange-400:oklch(.75 .183 55.934);--color-orange-500:oklch(.705 .213 47.604);--color-orange-600:oklch(.646 .222 41.116);--color-orange-700:oklch(.553 .195 38.402);--color-orange-800:oklch(.47 .157 37.304);--color-orange-900:oklch(.408 .123 38.172);--color-orange-950:oklch(.266 .079 36.259);--color-amber-50:oklch(.987 .022 95.277);--color-amber-100:oklch(.962 .059 95.617);--color-amber-200:oklch(.924 .12 95.746);--color-amber-300:oklch(.879 .169 91.605);--color-amber-400:oklch(.828 .189 84.429);--color-amber-500:oklch(.769 .188 70.08);--color-amber-600:oklch(.666 .179 58.318);--color-amber-700:oklch(.555 .163 48.998);--color-amber-800:oklch(.473 .137 46.201);--color-amber-900:oklch(.414 .112 45.904);--color-amber-950:oklch(.279 .077 45.635);--color-yellow-50:oklch(.987 .026 102.212);--color-yellow-100:oklch(.973 .071 103.193);--color-yellow-200:oklch(.945 .129 101.54);--color-yellow-300:oklch(.905 .182 98.111);--color-yellow-400:oklch(.852 .199 91.936);--color-yellow-500:oklch(.795 .184 86.047);--color-yellow-600:oklch(.681 .162 75.834);--color-yellow-700:oklch(.554 .135 66.442);--color-yellow-800:oklch(.476 .114 61.907);--color-yellow-900:oklch(.421 .095 57.708);--color-yellow-950:oklch(.286 .066 53.813);--color-lime-50:oklch(.986 .031 120.757);--color-lime-100:oklch(.967 .067 122.328);--color-lime-200:oklch(.938 .127 124.321);--color-lime-300:oklch(.897 .196 126.665);--color-lime-400:oklch(.841 .238 128.85);--color-lime-500:oklch(.768 .233 130.85);--color-lime-600:oklch(.648 .2 131.684);--color-lime-700:oklch(.532 .157 131.589);--color-lime-800:oklch(.453 .124 130.933);--color-lime-900:oklch(.405 .101 131.063);--color-lime-950:oklch(.274 .072 132.109);--color-green-50:oklch(.982 .018 155.826);--color-green-100:oklch(.962 .044 156.743);--color-green-200:oklch(.925 .084 155.995);--color-green-300:oklch(.871 .15 154.449);--color-green-400:oklch(.792 .209 151.711);--color-green-500:oklch(.723 .219 149.579);--color-green-600:oklch(.627 .194 149.214);--color-green-700:oklch(.527 .154 150.069);--color-green-800:oklch(.448 .119 151.328);--color-green-900:oklch(.393 .095 152.535);--color-green-950:oklch(.266 .065 152.934);--color-emerald-50:oklch(.979 .021 166.113);--color-emerald-100:oklch(.95 .052 163.051);--color-emerald-200:oklch(.905 .093 164.15);--color-emerald-300:oklch(.845 .143 164.978);--color-emerald-400:oklch(.765 .177 163.223);--color-emerald-500:oklch(.696 .17 162.48);--color-emerald-600:oklch(.596 .145 163.225);--color-emerald-700:oklch(.508 .118 165.612);--color-emerald-800:oklch(.432 .095 166.913);--color-emerald-900:oklch(.378 .077 168.94);--color-emerald-950:oklch(.262 .051 172.552);--color-teal-50:oklch(.984 .014 180.72);--color-teal-100:oklch(.953 .051 180.801);--color-teal-200:oklch(.91 .096 180.426);--color-teal-300:oklch(.855 .138 181.071);--color-teal-400:oklch(.777 .152 181.912);--color-teal-500:oklch(.704 .14 182.503);--color-teal-600:oklch(.6 .118 184.704);--color-teal-700:oklch(.511 .096 186.391);--color-teal-800:oklch(.437 .078 188.216);--color-teal-900:oklch(.386 .063 188.416);--color-teal-950:oklch(.277 .046 192.524);--color-cyan-50:oklch(.984 .019 200.873);--color-cyan-100:oklch(.956 .045 203.388);--color-cyan-200:oklch(.917 .08 205.041);--color-cyan-300:oklch(.865 .127 207.078);--color-cyan-400:oklch(.789 .154 211.53);--color-cyan-500:oklch(.715 .143 215.221);--color-cyan-600:oklch(.609 .126 221.723);--color-cyan-700:oklch(.52 .105 223.128);--color-cyan-800:oklch(.45 .085 224.283);--color-cyan-900:oklch(.398 .07 227.392);--color-cyan-950:oklch(.302 .056 229.695);--color-sky-50:oklch(.977 .013 236.62);--color-sky-100:oklch(.951 .026 236.824);--color-sky-200:oklch(.901 .058 230.902);--color-sky-300:oklch(.828 .111 230.318);--color-sky-400:oklch(.746 .16 232.661);--color-sky-500:oklch(.685 .169 237.323);--color-sky-600:oklch(.588 .158 241.966);--color-sky-700:oklch(.5 .134 242.749);--color-sky-800:oklch(.443 .11 240.79);--color-sky-900:oklch(.391 .09 240.876);--color-sky-950:oklch(.293 .066 243.157);--color-blue-50:oklch(.97 .014 254.604);--color-blue-100:oklch(.932 .032 255.585);--color-blue-200:oklch(.882 .059 254.128);--color-blue-300:oklch(.809 .105 251.813);--color-blue-400:oklch(.707 .165 254.624);--color-blue-500:oklch(.623 .214 259.815);--color-blue-600:oklch(.546 .245 262.881);--color-blue-700:oklch(.488 .243 264.376);--color-blue-800:oklch(.424 .199 265.638);--color-blue-900:oklch(.379 .146 265.522);--color-blue-950:oklch(.282 .091 267.935);--color-indigo-50:oklch(.962 .018 272.314);--color-indigo-100:oklch(.93 .034 272.788);--color-indigo-200:oklch(.87 .065 274.039);--color-indigo-300:oklch(.785 .115 274.713);--color-indigo-400:oklch(.673 .182 276.935);--color-indigo-500:oklch(.585 .233 277.117);--color-indigo-600:oklch(.511 .262 276.966);--color-indigo-700:oklch(.457 .24 277.023);--color-indigo-800:oklch(.398 .195 277.366);--color-indigo-900:oklch(.359 .144 278.697);--color-indigo-950:oklch(.257 .09 281.288);--color-violet-50:oklch(.969 .016 293.756);--color-violet-100:oklch(.943 .029 294.588);--color-violet-200:oklch(.894 .057 293.283);--color-violet-300:oklch(.811 .111 293.571);--color-violet-400:oklch(.702 .183 293.541);--color-violet-500:oklch(.606 .25 292.717);--color-violet-600:oklch(.541 .281 293.009);--color-violet-700:oklch(.491 .27 292.581);--color-violet-800:oklch(.432 .232 292.759);--color-violet-900:oklch(.38 .189 293.745);--color-violet-950:oklch(.283 .141 291.089);--color-purple-50:oklch(.977 .014 308.299);--color-purple-100:oklch(.946 .033 307.174);--color-purple-200:oklch(.902 .063 306.703);--color-purple-300:oklch(.827 .119 306.383);--color-purple-400:oklch(.714 .203 305.504);--color-purple-500:oklch(.627 .265 303.9);--color-purple-600:oklch(.558 .288 302.321);--color-purple-700:oklch(.496 .265 301.924);--color-purple-800:oklch(.438 .218 303.724);--color-purple-900:oklch(.381 .176 304.987);--color-purple-950:oklch(.291 .149 302.717);--color-fuchsia-50:oklch(.977 .017 320.058);--color-fuchsia-100:oklch(.952 .037 318.852);--color-fuchsia-200:oklch(.903 .076 319.62);--color-fuchsia-300:oklch(.833 .145 321.434);--color-fuchsia-400:oklch(.74 .238 322.16);--color-fuchsia-500:oklch(.667 .295 322.15);--color-fuchsia-600:oklch(.591 .293 322.896);--color-fuchsia-700:oklch(.518 .253 323.949);--color-fuchsia-800:oklch(.452 .211 324.591);--color-fuchsia-900:oklch(.401 .17 325.612);--color-fuchsia-950:oklch(.293 .136 325.661);--color-pink-50:oklch(.971 .014 343.198);--color-pink-100:oklch(.948 .028 342.258);--color-pink-200:oklch(.899 .061 343.231);--color-pink-300:oklch(.823 .12 346.018);--color-pink-400:oklch(.718 .202 349.761);--color-pink-500:oklch(.656 .241 354.308);--color-pink-600:oklch(.592 .249 .584);--color-pink-700:oklch(.525 .223 3.958);--color-pink-800:oklch(.459 .187 3.815);--color-pink-900:oklch(.408 .153 2.432);--color-pink-950:oklch(.284 .109 3.907);--color-rose-50:oklch(.969 .015 12.422);--color-rose-100:oklch(.941 .03 12.58);--color-rose-200:oklch(.892 .058 10.001);--color-rose-300:oklch(.81 .117 11.638);--color-rose-400:oklch(.712 .194 13.428);--color-rose-500:oklch(.645 .246 16.439);--color-rose-600:oklch(.586 .253 17.585);--color-rose-700:oklch(.514 .222 16.935);--color-rose-800:oklch(.455 .188 13.697);--color-rose-900:oklch(.41 .159 10.272);--color-rose-950:oklch(.271 .105 12.094);--color-slate-50:oklch(.984 .003 247.858);--color-slate-100:oklch(.968 .007 247.896);--color-slate-200:oklch(.929 .013 255.508);--color-slate-300:oklch(.869 .022 252.894);--color-slate-400:oklch(.704 .04 256.788);--color-slate-500:oklch(.554 .046 257.417);--color-slate-600:oklch(.446 .043 257.281);--color-slate-700:oklch(.372 .044 257.287);--color-slate-800:oklch(.279 .041 260.031);--color-slate-900:oklch(.208 .042 265.755);--color-slate-950:oklch(.129 .042 264.695);--color-gray-50:oklch(.985 .002 247.839);--color-gray-100:oklch(.967 .003 264.542);--color-gray-200:oklch(.928 .006 264.531);--color-gray-300:oklch(.872 .01 258.338);--color-gray-400:oklch(.707 .022 261.325);--color-gray-500:oklch(.551 .027 264.364);--color-gray-600:oklch(.446 .03 256.802);--color-gray-700:oklch(.373 .034 259.733);--color-gray-800:oklch(.278 .033 256.848);--color-gray-900:oklch(.21 .034 264.665);--color-gray-950:oklch(.13 .028 261.692);--color-zinc-50:oklch(.985 0 0);--color-zinc-100:oklch(.967 .001 286.375);--color-zinc-200:oklch(.92 .004 286.32);--color-zinc-300:oklch(.871 .006 286.286);--color-zinc-400:oklch(.705 .015 286.067);--color-zinc-500:oklch(.552 .016 285.938);--color-zinc-600:oklch(.442 .017 285.786);--color-zinc-700:oklch(.37 .013 285.805);--color-zinc-800:oklch(.274 .006 286.033);--color-zinc-900:oklch(.21 .006 285.885);--color-zinc-950:oklch(.141 .005 285.823);--color-neutral-50:oklch(.985 0 0);--color-neutral-100:oklch(.97 0 0);--color-neutral-200:oklch(.922 0 0);--color-neutral-300:oklch(.87 0 0);--color-neutral-400:oklch(.708 0 0);--color-neutral-500:oklch(.556 0 0);--color-neutral-600:oklch(.439 0 0);--color-neutral-700:oklch(.371 0 0);--color-neutral-800:oklch(.269 0 0);--color-neutral-900:oklch(.205 0 0);--color-neutral-950:oklch(.145 0 0);--color-stone-50:oklch(.985 .001 106.423);--color-stone-100:oklch(.97 .001 106.424);--color-stone-200:oklch(.923 .003 48.717);--color-stone-300:oklch(.869 .005 56.366);--color-stone-400:oklch(.709 .01 56.259);--color-stone-500:oklch(.553 .013 58.071);--color-stone-600:oklch(.444 .011 73.639);--color-stone-700:oklch(.374 .01 67.558);--color-stone-800:oklch(.268 .007 34.298);--color-stone-900:oklch(.216 .006 56.043);--color-stone-950:oklch(.147 .004 49.25);--color-black:#000;--color-white:#fff;--spacing:.25rem;--breakpoint-sm:40rem;--breakpoint-md:48rem;--breakpoint-lg:64rem;--breakpoint-xl:80rem;--breakpoint-2xl:96rem;--container-3xs:16rem;--container-2xs:18rem;--container-xs:20rem;--container-sm:24rem;--container-md:28rem;--container-lg:32rem;--container-xl:36rem;--container-2xl:42rem;--container-3xl:48rem;--container-4xl:56rem;--container-5xl:64rem;--container-6xl:72rem;--container-7xl:80rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height:calc(1.5/1);--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--text-xl:1.25rem;--text-xl--line-height:calc(1.75/1.25);--text-2xl:1.5rem;--text-2xl--line-height:calc(2/1.5);--text-3xl:1.875rem;--text-3xl--line-height:calc(2.25/1.875);--text-4xl:2.25rem;--text-4xl--line-height:calc(2.5/2.25);--text-5xl:3rem;--text-5xl--line-height:1;--text-6xl:3.75rem;--text-6xl--line-height:1;--text-7xl:4.5rem;--text-7xl--line-height:1;--text-8xl:6rem;--text-8xl--line-height:1;--text-9xl:8rem;--text-9xl--line-height:1;--font-weight-thin:100;--font-weight-extralight:200;--font-weight-light:300;--font-weight-normal:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--font-weight-extrabold:800;--font-weight-black:900;--tracking-tighter:-.05em;--tracking-tight:-.025em;--tracking-normal:0em;--tracking-wide:.025em;--tracking-wider:.05em;--tracking-widest:.1em;--leading-tight:1.25;--leading-snug:1.375;--leading-normal:1.5;--leading-relaxed:1.625;--leading-loose:2;--radius-xs:.125rem;--radius-sm:.25rem;--radius-md:.375rem;--radius-lg:.5rem;--radius-xl:.75rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--radius-4xl:2rem;--shadow-2xs:0 1px #0000000d;--shadow-xs:0 1px 2px 0 #0000000d;--shadow-sm:0 1px 3px 0 #0000001a,0 1px 2px -1px #0000001a;--shadow-md:0 4px 6px -1px #0000001a,0 2px 4px -2px #0000001a;--shadow-lg:0 10px 15px -3px #0000001a,0 4px 6px -4px #0000001a;--shadow-xl:0 20px 25px -5px #0000001a,0 8px 10px -6px #0000001a;--shadow-2xl:0 25px 50px -12px #00000040;--inset-shadow-2xs:inset 0 1px #0000000d;--inset-shadow-xs:inset 0 1px 1px #0000000d;--inset-shadow-sm:inset 0 2px 4px #0000000d;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-sm:0 1px 2px #00000026;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-lg:0 4px 4px #00000026;--drop-shadow-xl:0 9px 7px #0000001a;--drop-shadow-2xl:0 25px 25px #00000026;--ease-in:cubic-bezier(.4,0,1,1);--ease-out:cubic-bezier(0,0,.2,1);--ease-in-out:cubic-bezier(.4,0,.2,1);--animate-spin:spin 1s linear infinite;--animate-ping:ping 1s cubic-bezier(0,0,.2,1)infinite;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--animate-bounce:bounce 1s infinite;--blur-xs:4px;--blur-sm:8px;--blur-md:12px;--blur-lg:16px;--blur-xl:24px;--blur-2xl:40px;--blur-3xl:64px;--perspective-dramatic:100px;--perspective-near:300px;--perspective-normal:500px;--perspective-midrange:800px;--perspective-distant:1200px;--aspect-video:16/9;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-font-feature-settings:var(--font-sans--font-feature-settings);--default-font-variation-settings:var(--font-sans--font-variation-settings);--default-mono-font-family:var(--font-mono);--default-mono-font-feature-settings:var(--font-mono--font-feature-settings);--default-mono-font-variation-settings:var(--font-mono--font-variation-settings)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}body{line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::placeholder{opacity:1;color:color-mix(in oklab,currentColor 50%,transparent)}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::file-selector-button{appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.static{position:static}.mt-24{margin-top:calc(var(--spacing)*24)}.block{display:block}.contents{display:contents}.table{display:table}.bg-gray-900{background-color:var(--color-gray-900)}.bg-red-200{background-color:var(--color-red-200)}.text-3xl{font-size:var(--text-3xl);line-height:var(--tw-leading,var(--text-3xl--line-height))}.font-bold{--tw-font-weight:var(--font-weight-bold);font-weight:var(--font-weight-bold)}.underline{text-decoration-line:underline}.filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}}@keyframes spin{to{transform:rotate(360deg)}}@keyframes ping{75%,to{opacity:0;transform:scale(2)}}@keyframes pulse{50%{opacity:.5}}@keyframes bounce{0%,to{animation-timing-function:cubic-bezier(.8,0,1,1);transform:translateY(-25%)}50%{animation-timing-function:cubic-bezier(0,0,.2,1);transform:none}}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-blur{syntax:"*";inherits:false}@property --tw-brightness{syntax:"*";inherits:false}@property --tw-contrast{syntax:"*";inherits:false}@property --tw-grayscale{syntax:"*";inherits:false}@property --tw-hue-rotate{syntax:"*";inherits:false}@property --tw-invert{syntax:"*";inherits:false}@property --tw-opacity{syntax:"*";inherits:false}@property --tw-saturate{syntax:"*";inherits:false}@property --tw-sepia{syntax:"*";inherits:false}
|}

let dir_lib_file_login_ext_ml = {|
open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix


let handle_login _conn req body =
  let app_name = Sys.getenv "APP_NAME" in
  let substitutions = [
    ("{{APP_NAME}}", app_name);
    ("{{ERROR_MESSAGE}}", ""); 
  ] in

  match Request.meth req with
  | `GET ->
      Renderer.server_side_render "login.html" substitutions >>= fun (response, body) ->
      Cohttp_lwt.Body.to_string body >>= fun body_str ->
      Server.respond_string ~status:`OK ~body:body_str ()

  | `POST ->
      Cohttp_lwt.Body.to_string body >>= fun body_str ->
      let auth_result = Renderer.handle_auth body_str in
      begin match auth_result with
      | Ok (headers, uri) ->
          Server.respond_redirect ~headers ~uri ()
      | Error error_msg ->
          let substitutions = [
            ("{{APP_NAME}}", app_name);
            ("{{ERROR_MESSAGE}}", error_msg); (* Default to no error message *)
          ] in


          let error_substitutions = substitutions @ [("{{ERROR_MESSAGE}}", "<p style='color:red;'>" ^ error_msg ^ "</p>")] in
          Renderer.server_side_render "login.html" error_substitutions >>= fun (response, body) ->
          Cohttp_lwt.Body.to_string body >>= fun body_str ->
          Server.respond_string ~status:`OK ~body:body_str ()
      end

  | _ ->
      Server.respond_string ~status:`Method_not_allowed
        ~body:"Method not allowed" ()


|}

let dir_lib_file_logout_ext_ml = {|
open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix

(* Handler for /logout *)
let handle_logout _conn req _body =
  (* Destroy the session associated with the request *)
  Renderer.handle_session_destruction req;
  (* Redirect them to landing page ("/") or wherever you prefer *)
  Server.respond_redirect ~uri:(Uri.of_string "/") ()


|}

let dir_lib_file_about_ext_ml = {|
open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix


(* Handle landing page requests *)
let handle_about _conn req _body =
  let username = Renderer.get_username_if_user_is_logged_in req in

  let logged_in_as_html =
    match username with
    | Some username_string -> Printf.sprintf "Logged in as %s" username_string
    | None -> ""
  in

  let link_block_html =
    match username with
    | Some _ ->
      "<p><a href=\"/dashboard\">Go to Dashboard</a> | <a href=\"/logout\">Logout</a></p>"
    | None ->
      "<p><a href=\"/login\">Login</a> | <a href=\"/\">Landing</a></p>"
  in

  let app_name = Sys.getenv "APP_NAME" in

  let substitutions = [
    ("{{APP_NAME}}",app_name);
    ("{{PAGE_TITLE}}", "About Page 777");
    ("{{ABOUT_CONTENT}}", "This is the about page content. 771");
    ("{{LOGGED_IN_AS}}", logged_in_as_html);
    ("{{LINK_BLOCK}}", link_block_html);
  ] in

  Renderer.server_side_render "about.html" substitutions


|}

let dir_lib_file_assets_ext_ml = {|
open Lwt.Infix
open Cohttp
open Cohttp_lwt_unix

(* Serve any static file under "PUBLIC_DIR/assets". *)
let handle_assets conn req _body =
  (* Figure out which directory to serve from (defaults to "dist" if PUBLIC_DIR not set). *)
  let public_dir =
    Sys.getenv_opt "PUBLIC_DIR"
    |> Option.value ~default:"dist"
  in

  (* The requested URI path, e.g. "/assets/styles.css". *)
  let uri_path = Uri.path (Request.uri req) in

  (* Strip the prefix "/assets" (and possibly the extra slash). *)
  let subpath =
    if Astring.String.is_prefix ~affix:"/assets/" uri_path then
      (* e.g. "/assets/styles.css" => subpath "styles.css" *)
      let offset = String.length "/assets/" in
      String.sub uri_path offset (String.length uri_path - offset)
    else if Astring.String.is_prefix ~affix:"/assets" uri_path then
      (* e.g. exactly "/assets" => subpath "" *)
      let offset = String.length "/assets" in
      if String.length uri_path > offset then
        String.sub uri_path offset (String.length uri_path - offset)
      else
        ""
    else
      ""  (* If for some reason we're called incorrectly, fallback to empty string. *)
  in

  (* Build the full path inside "PUBLIC_DIR/assets". *)
  let file_path =
    Filename.concat public_dir (Filename.concat "assets" subpath)
  in

  (* Attempt to serve the file directly from disk. *)
  Lwt.catch
    (fun () ->
       Server.respond_file ~fname:file_path ()
    )
    (fun _ex ->
       (* If not found or any error, respond 404. *)
       Server.respond_string
         ~status:`Not_found
         ~body:"Not Found"
         ()
    )


|}

let dir_lib_file_dashboard_ext_ml = {|
open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix

open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix

let handle_dashboard _conn req _body =
  let username = Renderer.get_username_if_user_is_logged_in req in

  let app_name = Sys.getenv "APP_NAME" in

  match username with
  | None ->
      Server.respond_string ~status:`Forbidden
        ~body:"No valid session or not logged in. \
               Please <a href=\"/login\">log in</a>."
        ()
  | Some username_string ->
      let filename = "dashboard.html" in
      let substitutions = [
        ("{{APP_NAME}}", app_name);
        ("{{USERNAME}}", username_string)
      ] in
      Renderer.server_side_render filename substitutions


|}

let dir_lib_file_landing_ext_ml = {|
(* lib/Landing.ml *)

open Cohttp
open Cohttp_lwt_unix
open Lwt.Infix
open Base64  (* Assume Base64 is used for encoding *)


(* Handle landing page requests *)
let handle_landing _conn req _body =
  let username = Renderer.get_username_if_user_is_logged_in req in

  let logged_in_as_html =
    match username with
    | Some username_string -> Printf.sprintf "Logged in as %s" username_string
    | None -> ""
  in

  let link_block_html =
    match username with
    | Some _ ->
      "<p><a href=\"/dashboard\">Go to Dashboard</a> | <a href=\"/about\">About</a> | <a href=\"/logout\">Logout</a></p>"
    | None ->
      "<p><a href=\"/login\">Login</a> | <a href=\"/about\">About</a></p>"
  in

  let app_name = Sys.getenv "APP_NAME" in

  let substitutions = [
    ("{{APP_NAME}}", app_name);
    ("{{LOGGED_IN_AS}}", logged_in_as_html);
    ("{{LINK_BLOCK}}", link_block_html);
  ] in

  Renderer.server_side_render "landing.html" substitutions


|}

